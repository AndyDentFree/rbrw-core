<?xml version="1.0"?>
<RBProject version="2009r2">
<block type="Module" ID="1827333862">
 <ObjName>rbrwLayoutBand_GraphicsRender</ObjName>
 <ObjContainerID>1963759756</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>rbrwLayoutBand_Render</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>clone</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function clone(newOwner as rbrwDrawable) As rbrwRender</SourceLine>
   <SourceLine>return new rbrwLayoutBand_GraphicsRender( rbrwLayoutBand(newOwner) )</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>newOwner as rbrwDrawable</ItemParams>
  <ItemResult>rbrwRender</ItemResult>
 </Method>
 <Method>
  <ItemName>draw</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub draw()</SourceLine>
   <SourceLine>dim currRep as rbrwReport = rbrwReport.currentReport</SourceLine>
   <SourceLine>dim bandIndenting as double = currRep.settings.bandIndenting</SourceLine>
   <SourceLine>dim currentVerticalPos as double = currRep.currentVerticalPos</SourceLine>
   <SourceLine>dim leftMargin as double = currRep.settings.leftMargin</SourceLine>
   <SourceLine>dim bodyWidth as double = currRep.bodyWidth</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>rbrwCurrentDraw.moveTo leftMargin+bandIndenting, currentVerticalPos</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim theBorder as rbrwGraphicsBorderDE</SourceLine>
   <SourceLine>if not (mOwner.border is nil) then // fancier check later, hack to just get solid borders for statements</SourceLine>
   <SourceLine>rbrwGraphicsBorderDE.recordElement rbrwCurrentDraw.x,rbrwCurrentDraw.y</SourceLine>
   <SourceLine>theBorder = rbrwGraphicsBorderDE( rbrwDrawingElement.lastElement )</SourceLine>
   <SourceLine>theBorder.colSizer =  mOwner.border.colSizer</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim maxBandWidth as integer</SourceLine>
   <SourceLine>dim firstRowHeight as integer // HACK for underlining first row in statements</SourceLine>
   <SourceLine>for each theBlock as rbrwBlock in mOwner.blocks.blocks</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim blockWidth as double = theBlock.width</SourceLine>
   <SourceLine>dim incXAfter as double</SourceLine>
   <SourceLine>dim ptBasePriorRestorable as rbrw.Point</SourceLine>
   <SourceLine>dim restoreCoordsAfterBlocks as Boolean  // flag for situations like aligned right where may want to keep accumulating on left</SourceLine>
   <SourceLine>if theBlock.align = rbrwBlock.blockAlignT.alignRight then</SourceLine>
   <SourceLine>// BOLD ASSUMPTION - only one right aligned item per line.</SourceLine>
   <SourceLine>// Get the current position first</SourceLine>
   <SourceLine>rbrwCurrentDraw.moveTo 0, 0, ptBasePriorRestorable</SourceLine>
   <SourceLine>// Now reposition properly for the right alignment</SourceLine>
   <SourceLine>rbrwCurrentDraw.moveTo bodyWidth + leftMargin - bandIndenting - blockWidth, ptBasePriorRestorable.y</SourceLine>
   <SourceLine>maxBandWidth = Max(maxBandWidth, bodyWidth + leftMargin - bandIndenting)</SourceLine>
   <SourceLine>restoreCoordsAfterBlocks = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif theBlock.align = rbrwBlock.blockAlignT.alignCenter then</SourceLine>
   <SourceLine>// BOLD ASSUMPTION - only one centered item per line.</SourceLine>
   <SourceLine>rbrwCurrentDraw.moveTo 0, 0, ptBasePriorRestorable</SourceLine>
   <SourceLine>// Now reposition for center alignment</SourceLine>
   <SourceLine>dim newX as double = (bodyWidth - blockWidth)/2.0</SourceLine>
   <SourceLine>// centre on page rather than between margins dim newX as double = leftMargin+ (bodyWidth - blockWidth)/2.0</SourceLine>
   <SourceLine>rbrwCurrentDraw.moveTo newX, ptBasePriorRestorable.y</SourceLine>
   <SourceLine>maxBandWidth = Max(maxBandWidth, newX + blockWidth/2.0 )</SourceLine>
   <SourceLine>restoreCoordsAfterBlocks = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif theBlock.align = rbrwBlock.blockAlignT.alignTextCenter and theBlock.fixedWidth &gt; 0 then</SourceLine>
   <SourceLine>// center the text within the width - only makes sense if also set fixed width</SourceLine>
   <SourceLine>dim pt as rbrw.Point</SourceLine>
   <SourceLine>rbrwCurrentDraw.moveTo 0, 0, pt</SourceLine>
   <SourceLine>// Now reposition for center alignment - same as left-aligned default case, just incremented by half the difference</SourceLine>
   <SourceLine>dim marginInCell as double =  (theBlock.fixedWidth - blockWidth)/2.0</SourceLine>
   <SourceLine>dim newX as double = pt.x + marginInCell  // followed by the text followed by another marginInCell</SourceLine>
   <SourceLine>rbrwCurrentDraw.moveTo newX, pt.y</SourceLine>
   <SourceLine>incXAfter = theBlock.fixedWidth - marginInCell  // move on all bar the left margin</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine> // NOT YET IMPLEMENTED - cope with other alignments?</SourceLine>
   <SourceLine>// default left-aligned behaviour</SourceLine>
   <SourceLine>if theBlock.fixedWidth &gt; 0 then</SourceLine>
   <SourceLine>incXafter = theBlock.fixedWidth // move horizontally the full fixed width</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>incXafter = blockWidth</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if // switch alignments</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>SetCurrentBlockCoords rbrwCurrentDraw.x, rbrwCurrentDraw.y, theBlock  // save for callbacks</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>theBlock.draw</SourceLine>
   <SourceLine>rbrwCurrentDraw.incX incXAfter</SourceLine>
   <SourceLine>maxBandWidth = Max(maxBandWidth, rbrwCurrentDraw.x )</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if theBlock.moveDownAfter then</SourceLine>
   <SourceLine>dim ptToMoveFrom as rbrw.Point</SourceLine>
   <SourceLine>rbrwCurrentDraw.moveTo 0, 0,ptToMoveFrom</SourceLine>
   <SourceLine>// Now reposition properly for the right alignment</SourceLine>
   <SourceLine>rbrwCurrentDraw.moveTo leftMargin +bandIndenting, ptToMoveFrom.y + theBlock.fixedHeight</SourceLine>
   <SourceLine>if firstRowHeight = 0 then</SourceLine>
   <SourceLine>firstRowHeight = theBlock.fixedHeight</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>elseif restoreCoordsAfterBlocks then</SourceLine>
   <SourceLine>rbrwCurrentDraw.moveTo ptBasePriorRestorable</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>currRep.incVerticalPos mOwner.fixedHeight</SourceLine>
   <SourceLine>if not(theBorder is nil) then</SourceLine>
   <SourceLine>theBorder.width = maxBandWidth</SourceLine>
   <SourceLine>theBorder.height = mOwner.fixedHeight + 2  // HACK TO GET PRETTY RESULTS</SourceLine>
   <SourceLine>theBorder.headerHeight = firstRowHeight</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
 </ViewBehavior>
</block>
</RBProject>

<?xml version="1.0"?>
<RBProject version="2009r2">
<block type="Module" ID="439837969">
 <ObjName>rbrwCurrentDraw</ObjName>
 <ObjContainerID>-1075463008</ObjContainerID>
 <IsClass>0</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>CurrentGraphics</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function CurrentGraphics() As Graphics</SourceLine>
   <SourceLine>return sCurrentGraphics</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>Graphics</ItemResult>
 </Method>
 <Method>
  <ItemName>CurrentGraphics</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub CurrentGraphics(assigns value as Graphics)</SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>if sCurrentGraphics = nil then</SourceLine>
   <SourceLine>system.DebugLog "rbrwCurrentDraw.CurrentGraphics.Set setting Graphics pointer value"</SourceLine>
   <SourceLine>elseif  sCurrentGraphics &lt;&gt; value  then</SourceLine>
   <SourceLine>if value = nil then</SourceLine>
   <SourceLine>system.DebugLog "rbrwCurrentDraw.CurrentGraphics.Set clearing Graphics pointer value"</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>system.DebugLog "rbrwCurrentDraw.CurrentGraphics.Set changing Graphics pointer value"</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>sCurrentGraphics = value</SourceLine>
   <SourceLine>if sScalingFactor = 0.0 then</SourceLine>
   <SourceLine>sScalingFactor = 1.0  // resets as well as coping with need to initialise from default 0</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>assigns value as Graphics</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>getTextExtent</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function getTextExtent(ts as rbrwTextStyle, text as string) As double</SourceLine>
   <SourceLine>SetStyleFrom ts</SourceLine>
   <SourceLine>return sCurrentGraphics.StringWidth( text )</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>ts as rbrwTextStyle, text as string</ItemParams>
  <ItemResult>double</ItemResult>
 </Method>
 <Method>
  <ItemName>incX</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub incX(dx as double)</SourceLine>
   <SourceLine>sX = sX + dx</SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>if sX &lt; 0 then</SourceLine>
   <SourceLine>break</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>dx as double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>incY</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub incY(dy as double)</SourceLine>
   <SourceLine>sY = sY + dy</SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>if sY &lt; 0 then</SourceLine>
   <SourceLine>break</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>dy as double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>moveTo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub moveTo(inX as double, inY as double)</SourceLine>
   <SourceLine>#if LoggingRBRWDrawing</SourceLine>
   <SourceLine>system.DebugLog "rbrwCurrentDraw.moveTo' FROM" + str(sX) + ", " + str(sY) + " to " + str(inX) + ", " + str(inY) + EndOfLine</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>sX = inX</SourceLine>
   <SourceLine>sy = inY</SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>if sX &lt; 0  or sY &lt; 0 then</SourceLine>
   <SourceLine>break</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>inX as double, inY as double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>moveTo</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub moveTo(inX as double, inY as double, ByRef outPrevCoords as rbrw.Point)</SourceLine>
   <SourceLine>#if LoggingRBRWDrawing</SourceLine>
   <SourceLine>system.DebugLog "rbrwCurrentDraw.moveTo (outPrevCoords) ' FROM" + str(sX) + ", " + str(sY) + " to " + str(inX) + ", " + str(inY) + EndOfLine</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>outPrevCoords.x = sX</SourceLine>
   <SourceLine>outPrevCoords.y = sY</SourceLine>
   <SourceLine>sX = inX</SourceLine>
   <SourceLine>sy = inY</SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>if sX &lt; 0  or sY &lt; 0 then</SourceLine>
   <SourceLine>break</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>inX as double, inY as double, ByRef outPrevCoords as rbrw.Point</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>resetCoordinates</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub resetCoordinates()</SourceLine>
   <SourceLine>sX = 0.0</SourceLine>
   <SourceLine>sY = 0.0</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>x</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function x() As double</SourceLine>
   <SourceLine>return sX</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>double</ItemResult>
 </Method>
 <Method>
  <ItemName>y</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function y() As double</SourceLine>
   <SourceLine>return sY</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>double</ItemResult>
 </Method>
 <Method>
  <ItemName>createScratchPictureGraphics</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub createScratchPictureGraphics(picWidth as integer, picHeight as integer)</SourceLine>
   <SourceLine>sPictureForGraphics = new Picture(picWidth, picHeight, 32)</SourceLine>
   <SourceLine>sCurrentGraphics = sPictureForGraphics.Graphics</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>picWidth as integer, picHeight as integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>releaseScratchPictureGraphics</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub releaseScratchPictureGraphics()</SourceLine>
   <SourceLine>if sPictureForGraphics is nil then return</SourceLine>
   <SourceLine>if sCurrentGraphics = sPictureForGraphics.Graphics then</SourceLine>
   <SourceLine>sCurrentGraphics = nil</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>sPictureForGraphics = nil</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>ClearRect</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub ClearRect(x As Integer, y As Integer, width As Integer, height As Integer)</SourceLine>
   <SourceLine>sCurrentGraphics.ClearRect sf*xOffset + sf*x, sf*yOffset + sf*y, sf*width, sf*height</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>x As Integer, y As Integer, width As Integer, height As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Clip</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Clip(x as Integer, y as Integer, width as Integer, height as Integer) As Graphics</SourceLine>
   <SourceLine>return sCurrentGraphics.Clip( sf*xOffset + sf*x, sf*yOffset + sf*y, sf*width, sf*height )</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>x as Integer, y as Integer, width as Integer, height as Integer</ItemParams>
  <ItemResult>Graphics</ItemResult>
 </Method>
 <Method>
  <ItemName>DrawCautionIcon</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DrawCautionIcon(x As Integer, y As Integer)</SourceLine>
   <SourceLine>sCurrentGraphics.DrawCautionIcon sf*xOffset + sf*x, sf*yOffset + sf*y</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>x As Integer, y As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DrawLine</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DrawLine(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer)</SourceLine>
   <SourceLine>'sCurrentGraphics.DrawLine sf*xOffset + sf*x1, sf*yOffset + sf*y1, sf*xOffset + sf*x2, sf*yOffset + sf*y2</SourceLine>
   <SourceLine>dim w as double = Max(1.0, Abs( x2-x1))</SourceLine>
   <SourceLine>dim h as double = Max(1.0, Abs(y2-y1) )</SourceLine>
   <SourceLine>sCurrentGraphics.FillRect sf*xOffset + sf*x1, sf*yOffset + sf*y1, sf*w, sf*h</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DrawOval</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DrawOval(x As Integer, y As Integer, width As Integer, height As Integer)</SourceLine>
   <SourceLine>sCurrentGraphics.DrawOval sf*xOffset + sf*x, sf*yOffset + sf*y, sf*width, sf*height</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>x As Integer, y As Integer, width As Integer, height As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DrawRect</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DrawRect(x As Integer, y As Integer, width As Integer, height As Integer)</SourceLine>
   <SourceLine>sCurrentGraphics.DrawRect sf*xOffset + sf*x, sf*yOffset + sf*y, sf*width, sf*height</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>x As Integer, y As Integer, width As Integer, height As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DrawRoundRect</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DrawRoundRect(x As Integer, y As Integer, width As Integer, height As Integer, arcWidth As Integer, arcHeight As Integer)</SourceLine>
   <SourceLine>sCurrentGraphics.DrawRoundRect sf*xOffset + sf*x, sf*yOffset + sf*y, sf*width, sf*height, sf*arcWidth, sf*arcHeight</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>x As Integer, y As Integer, width As Integer, height As Integer, arcWidth As Integer, arcHeight As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>FillOval</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub FillOval(x As Integer, y As Integer, width As Integer, height As Integer)</SourceLine>
   <SourceLine>sCurrentGraphics.FillOval sf*xOffset + sf*x, sf*yOffset + sf*y, sf*width, sf*height</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>x As Integer, y As Integer, width As Integer, height As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>FillRect</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub FillRect(x As Integer, y As Integer, width As Integer, height As Integer)</SourceLine>
   <SourceLine>sCurrentGraphics.FillRect sf*xOffset + sf*x, sf*yOffset + sf*y, sf*width, sf*height</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>x As Integer, y As Integer, width As Integer, height As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>FillRoundRect</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub FillRoundRect(x As Integer, y As Integer, width As Integer, height As Integer, arcWidth As Integer, arcHeight As Integer)</SourceLine>
   <SourceLine>sCurrentGraphics.FillRoundRect sf*xOffset + sf*x, sf*yOffset + sf*y, sf*width, sf*height, sf*arcWidth, sf*arcHeight</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>x As Integer, y As Integer, width As Integer, height As Integer, arcWidth As Integer, arcHeight As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DrawPicture</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DrawPicture(image As Picture, x As Integer, y As Integer, w1 As Integer=-10000, h1 As Integer=-10000, sx As Integer=0, sy As Integer=0, w2 As Integer=-10000, h2 As Integer=-10000)</SourceLine>
   <SourceLine>if w1=-10000 then</SourceLine>
   <SourceLine>sCurrentGraphics.DrawPicture Image, sf*xOffset + sf*x, sf*yOffset + sf*y</SourceLine>
   <SourceLine>elseif h1=-10000 then</SourceLine>
   <SourceLine>sCurrentGraphics.DrawPicture Image, sf*xOffset + sf*x, sf*yOffset + sf*y, sf*w1</SourceLine>
   <SourceLine>elseif sx=0 then</SourceLine>
   <SourceLine>sCurrentGraphics.DrawPicture Image, sf*xOffset + sf*x, sf*yOffset + sf*y, sf*w1, sf*h1</SourceLine>
   <SourceLine>elseif sy=0 then</SourceLine>
   <SourceLine>sCurrentGraphics.DrawPicture Image, sf*xOffset + sf*x, sf*yOffset + sf*y, sf*w1, sf*h1, sf*sx</SourceLine>
   <SourceLine>elseif w2=-10000 then</SourceLine>
   <SourceLine>sCurrentGraphics.DrawPicture Image, sf*xOffset + sf*x, sf*yOffset + sf*y, sf*w1, sf*sx, sf*sy</SourceLine>
   <SourceLine>elseif h2=-10000 then</SourceLine>
   <SourceLine>sCurrentGraphics.DrawPicture Image, sf*xOffset + sf*x, sf*yOffset + sf*y, sf*w1, sf*sx, sf*sy, sf*w2</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>sCurrentGraphics.DrawPicture Image, sf*xOffset + sf*x, sf*yOffset + sf*y, sf*w1, sf*sx, sf*sy, sf*w2, sf*h2</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>image As Picture, x As Integer, y As Integer, w1 As Integer=-10000, h1 As Integer=-10000, sx As Integer=0, sy As Integer=0, w2 As Integer=-10000, h2 As Integer=-10000</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DrawString</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DrawString(str As String, x As Integer, y As Integer, width As Integer=0, condense As Boolean=False)</SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>if x &lt; 0 or y &lt; 0 or IsNaN(x) or IsNan(y) then</SourceLine>
   <SourceLine>break</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>#if LoggingRBRWDrawing</SourceLine>
   <SourceLine>system.DebugLog "rbrwCurrentDraw.DrawString '" + str + "' at: " + str(x) + ", " + str(y) + EndOfLine</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>sCurrentGraphics.DrawString str, sf*xOffset + sf*x, sf*yOffset + sf*y, sf*width, condense</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>str As String, x As Integer, y As Integer, width As Integer=0, condense As Boolean=False</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DrawObject</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DrawObject(object2D As Object2D, deltaX As Integer=0, deltaY As Integer=0)</SourceLine>
   <SourceLine>sCurrentGraphics.DrawObject object2D, sf*deltaX, sf*deltaY</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>object2D As Object2D, deltaX As Integer=0, deltaY As Integer=0</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>StringWidth</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function StringWidth(Text As String) As Double</SourceLine>
   <SourceLine>// NOT scaled as should be scaled by setting scaled TextSize</SourceLine>
   <SourceLine>return  sCurrentGraphics.StringWidth( Text )  // may be slightly inaccurate compared to real result if working on scaled fonts</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>Text As String</ItemParams>
  <ItemResult>Double</ItemResult>
 </Method>
 <Method>
  <ItemName>StringHeight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function StringHeight(Text As String, WrapWidth As Integer) As Integer</SourceLine>
   <SourceLine>// NOT scaled as should be scaled by setting scaled TextSize</SourceLine>
   <SourceLine>return sCurrentGraphics.StringHeight( Text, WrapWidth )  // may be slightly inaccurate compared to real result if working on scaled fonts</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>Text As String, WrapWidth As Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>StringDirection</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function StringDirection(Text As String) As Integer</SourceLine>
   <SourceLine>return sCurrentGraphics.StringDirection(Text)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>Text As String</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>NextPage</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub NextPage()</SourceLine>
   <SourceLine>sCurrentGraphics.NextPage</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DrawStopIcon</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DrawStopIcon(x As Integer, y As Integer)</SourceLine>
   <SourceLine>sCurrentGraphics.DrawStopIcon sf*xOffset + sf*x, sf*yOffset + sf*y</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>x As Integer, y As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>DrawNoteIcon</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DrawNoteIcon(x As Integer, y As Integer)</SourceLine>
   <SourceLine>sCurrentGraphics.DrawNoteIcon sf*xOffset + sf*x, sf*yOffset + sf*y</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>x As Integer, y As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Pixel</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Pixel(x As Integer, y As Integer) As Color</SourceLine>
   <SourceLine>return sCurrentGraphics.Pixel( sf*xOffset + sf*x, sf*yOffset + sf*y) </SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>x As Integer, y As Integer</ItemParams>
  <ItemResult>Color</ItemResult>
 </Method>
 <Method>
  <ItemName>DrawPolygon</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub DrawPolygon(points() As Integer)</SourceLine>
   <SourceLine>dim scaledPoints() as integer</SourceLine>
   <SourceLine>for each p as integer in points</SourceLine>
   <SourceLine>scaledPoints.Append sf*p</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>sCurrentGraphics.DrawPolygon scaledPoints</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>points() As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>FillPolygon</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub FillPolygon(points() As Integer)</SourceLine>
   <SourceLine>dim scaledPoints() as integer</SourceLine>
   <SourceLine>for each p as integer in points</SourceLine>
   <SourceLine>scaledPoints.Append sf*p</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>sCurrentGraphics.FillPolygon scaledPoints</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>points() As Integer</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Handle</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Handle(type As Integer) As Integer</SourceLine>
   <SourceLine>return sCurrentGraphics.Handle(type)</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>type As Integer</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Pixel</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Pixel(x As Integer, y As Integer, Assigns _value As Color)</SourceLine>
   <SourceLine>sCurrentGraphics.Pixel( sf*xOffset + sf*x, sf*yOffset + sf*y) = _value</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>x As Integer, y As Integer, Assigns _value As Color</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>SetStyleFrom</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetStyleFrom(inStyle as rbrwTextStyle)</SourceLine>
   <SourceLine>#if LoggingRBRWDrawing</SourceLine>
   <SourceLine>dim v as Variant = InStyle</SourceLine>
   <SourceLine>system.DebugLog "rbrwCurrentDraw.SetStyleFrom " +Hex(v.Hash) + " Font: " + inStyle.mTextFont + " " + str(inStyle.mTextSize) + EndOfLine</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>Bold = inStyle.mBold</SourceLine>
   <SourceLine>Italic = inStyle.mItalic</SourceLine>
   <SourceLine>TextFont = inStyle.mTextFont</SourceLine>
   <SourceLine>TextSize = inStyle.mTextSize</SourceLine>
   <SourceLine>Underline = inStyle.mUnderline</SourceLine>
   <SourceLine>ForeColor = inStyle.mFillColor</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>inStyle as rbrwTextStyle</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>setOffset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub setOffset(inX as double, inY as double)</SourceLine>
   <SourceLine>// typically used to set the printing offsets which will be negative so no checking as to their value is particularly sensible</SourceLine>
   <SourceLine>xOffset = inX</SourceLine>
   <SourceLine>yOffset = inY</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>inX as double, inY as double</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Note>
  <ItemName>About</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>About</NoteLine>
   <NoteLine>based on oofCurrentDraw to provide a current graphics drawing and measurement environment</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>also incorporates scaling and if you use the Graphics-like accessors in here will scale results</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine>Rule of thumb - incoming values are scaled up, outgoing are scaled down again so something like TextSize </NoteLine>
   <NoteLine>will return the same value regardless of scaling</NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Property>
  <ItemName>sCurrentGraphics</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>sCurrentGraphics As Graphics</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>sCurrentGraphics As Graphics</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>sX</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>sX As double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>sX As double</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>sY</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>sY As double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>sY As double</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>sPictureForGraphics</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>sPictureForGraphics As Picture</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>sPictureForGraphics As Picture</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>sScalingFactor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>sScalingFactor As double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>sScalingFactor As double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>sf</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>sf As double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>sf As double = 1.0</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>ScalingFactor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ScalingFactor As double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ScalingFactor As double</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>sf = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return sf</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Bold</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Bold As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Bold As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>sCurrentGraphics.Bold = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return sCurrentGraphics.Bold</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Italic</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Italic As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Italic As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>sCurrentGraphics.Italic = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return sCurrentGraphics.Italic</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Underline</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Underline As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Underline As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>sCurrentGraphics.Underline = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return sCurrentGraphics.Underline</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>PenHeight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>PenHeight As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>PenHeight As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>sCurrentGraphics.PenHeight = value * sf</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return sCurrentGraphics.PenHeight / sf</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>PenWidth</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>PenWidth As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>PenWidth As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>sCurrentGraphics.PenWidth = value*sf</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return sCurrentGraphics.PenWidth/sf</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>TextSize</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TextSize As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TextSize As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>dim newFontSize as integer =  value * sf</SourceLine>
   <SourceLine>sCurrentGraphics.TextSize =  newFontSize</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return sCurrentGraphics.TextSize / sf</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>TextHeight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TextHeight As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TextHeight As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>// NOT scaled as should be scaled by setting scaled TextSize</SourceLine>
   <SourceLine>return sCurrentGraphics.TextHeight</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Height</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Height As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Height As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return sCurrentGraphics.Height</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>Width</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Width As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>Width As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>// NOT scaled as should be scaled by setting scaled TextSize</SourceLine>
   <SourceLine>return sCurrentGraphics.Width</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>ForeColor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>ForeColor As Color</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>ForeColor As Color</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>sCurrentGraphics.ForeColor = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return sCurrentGraphics.ForeColor</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>UseOldRenderer</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>UseOldRenderer As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>UseOldRenderer As Boolean</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>sCurrentGraphics.UseOldRenderer = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return sCurrentGraphics.UseOldRenderer</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>TextAscent</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TextAscent As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TextAscent As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>// NOT scaled as should be scaled by setting scaled TextSize</SourceLine>
   <SourceLine>return sCurrentGraphics.TextAscent</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>TextFont</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>TextFont As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>TextFont As String</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>sCurrentGraphics.TextFont = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>return sCurrentGraphics.TextFont</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <Property>
  <ItemName>xOffset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>xOffset As double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>xOffset As double</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>yOffset</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>yOffset As double</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>yOffset As double</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>UnscaledTextHeight</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Property UnscaledTextHeight As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>UnscaledTextHeight As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>// needed by things which need to work in 72dpi mode despite our current scaling factor</SourceLine>
   <SourceLine>// eg: rbrwGraphicsTextDE.draw</SourceLine>
   <SourceLine>// it would be expensive but probably slightly more accurate to pop the size, set it back to an unscaled value</SourceLine>
   <SourceLine>// then get TextHeight but the return value is only going to be multipled by sf anyway as part of a string position</SourceLine>
   <SourceLine>// so we don't care about the accuracy</SourceLine>
   <SourceLine>return sCurrentGraphics.TextHeight / sf</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>sScalingFactor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ScalingFactor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>double</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Bold</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Italic</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Underline</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>PenHeight</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>PenWidth</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextSize</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextHeight</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Height</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Width</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ForeColor</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>&amp;h000000</PropertyValue>
   <ItemType>Color</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>UseOldRenderer</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Boolean</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextAscent</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>TextFont</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>String</ItemType>
   <EditorType>MultiLineEditor</EditorType>
  </ViewProperty>
 </ViewBehavior>
 <Constant>
  <ItemName>LoggingRBRWDrawing</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>LoggingRBRWDrawing</ItemName>
  <ItemType>3</ItemType>
  <ItemDef>True</ItemDef>
  <ItemFlags>0</ItemFlags>
 </Constant>
</block>
</RBProject>

<?xml version="1.0"?>
<RBProject version="2011r4.1" FormatVersion="2" MinIDEVersion="20070100">
<block type="Module" ID="1441950825">
 <ObjName>rbrwXMLSource</ObjName>
 <ObjContainerID>450275996</ObjContainerID>
 <IsClass>1</IsClass>
 <Interfaces>rbrwDataset</Interfaces>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>start</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub start()</SourceLine>
   <SourceLine>// Part of the rbrwIterableSource interface.</SourceLine>
   <SourceLine>mIter = 0</SourceLine>
   <SourceLine>mLastLoadedIter = mIter - 1  // guarantee different</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>more</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function more() As boolean</SourceLine>
   <SourceLine>// Part of the rbrwIterableSource interface.</SourceLine>
   <SourceLine>return mIter &lt;= mUbound</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>inc</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub inc()</SourceLine>
   <SourceLine>// Part of the rbrwIterableSource interface.</SourceLine>
   <SourceLine>mLastLoadedIter = mIter - 1  // guarantee different</SourceLine>
   <SourceLine>mIter = mIter + 1</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>iterator</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function iterator() As rbrwIterableSource</SourceLine>
   <SourceLine>// Part of the rbrwDataset interface.</SourceLine>
   <SourceLine>return self</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>rbrwIterableSource</ItemResult>
 </Method>
 <Method>
  <ItemName>facade</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function facade() As rbrwFieldFacade</SourceLine>
   <SourceLine>// Part of the rbrwDataset interface.</SourceLine>
   <SourceLine>return self</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>rbrwFieldFacade</ItemResult>
 </Method>
 <Method>
  <ItemName>listFields</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function listFields() As string()</SourceLine>
   <SourceLine>// Part of the rbrwFieldFacade interface.</SourceLine>
   <SourceLine>LazyLoad  // still load even though don't need to load to get names, so are consistent about LazyLoad as side-effect</SourceLine>
   <SourceLine>if mUseOnlyNamedCols then</SourceLine>
   <SourceLine>return mColNames</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim ret() as string</SourceLine>
   <SourceLine>if mCurrentElement is nil then return ret</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim childBound as integer = mCurrentElement.ChildCount - 1</SourceLine>
   <SourceLine>for i as integer = 0 to childBound</SourceLine>
   <SourceLine>dim childEl as XmlElement = XmlElement( mCurrentElement.Child(i) )</SourceLine>
   <SourceLine>ret.Append childEl.Name</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>return ret</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>string()</ItemResult>
 </Method>
 <Method>
  <ItemName>fieldValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function fieldValue(name as string) As string</SourceLine>
   <SourceLine>// Part of the rbrwFieldFacade interface.</SourceLine>
   <SourceLine>LazyLoad</SourceLine>
   <SourceLine>dim childrenByName as XmlNodeList = mCurrentElement.XQL(name)</SourceLine>
   <SourceLine>if childrenByName is nil or childrenByName.Length&lt;&gt;1 then</SourceLine>
   <SourceLine>raise new KeyNotFoundException</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim fieldEl as XmlElement = XmlElement( childrenByName.Item(0) )</SourceLine>
   <SourceLine>return fieldEl.Child(0).Value</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>name as string</ItemParams>
  <ItemResult>string</ItemResult>
 </Method>
 <Method>
  <ItemName>fieldValue</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function fieldValue(zeroBasedIndex as integer) As string</SourceLine>
   <SourceLine>// Part of the rbrwFieldFacade interface.</SourceLine>
   <SourceLine>LazyLoad</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mUseOnlyNamedCols then</SourceLine>
   <SourceLine>return fieldValue( mColNames(zeroBasedIndex) )</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim fieldEl as XmlElement = XmlElement( mCurrentElement.Child(zeroBasedIndex) )</SourceLine>
   <SourceLine>return fieldEl.Child(0).Value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>zeroBasedIndex as integer</ItemParams>
  <ItemResult>string</ItemResult>
 </Method>
 <Method>
  <ItemName>fieldCount</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function fieldCount() As integer</SourceLine>
   <SourceLine>// Part of the rbrwFieldFacade interface.</SourceLine>
   <SourceLine>LazyLoad  // still load even though don't need to load to get names, so are consistent about LazyLoad as side-effectif mCurrentElement is nil then return 0</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if mUseOnlyNamedCols then</SourceLine>
   <SourceLine>return mColNames.Ubound + 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// at any given point, return the number of elements in the current element</SourceLine>
   <SourceLine>// so if have "rectangular" XML, will be constant</SourceLine>
   <SourceLine>return mCurrentElement.ChildCount</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult>integer</ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(indoc as XMLDocument, inPath as String)</SourceLine>
   <SourceLine>mBasePath = inPath</SourceLine>
   <SourceLine>mDoc = inDoc</SourceLine>
   <SourceLine>mLastLoadedIter = mIter - 1 // guarantee different so LazyLoad optimisation works</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>indoc as XMLDocument, inPath as String</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>LazyLoad</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub LazyLoad()</SourceLine>
   <SourceLine>if mIter = mLastLoadedIter then return</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if not mLoaded  then </SourceLine>
   <SourceLine>mLoaded = true</SourceLine>
   <SourceLine>mElements = mDoc.Xql( mBasePath )</SourceLine>
   <SourceLine>if mElements is nil then</SourceLine>
   <SourceLine>mUbound = -1</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>mUbound = mElements.Length - 1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// also load the current element based on the iterator</SourceLine>
   <SourceLine>mCurrentElement = XmlElement( mElements.Item(mIter) )</SourceLine>
   <SourceLine>mLastLoadedIter = mIter</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(indoc as XMLDocument, inPath as String, inColNames() as string)</SourceLine>
   <SourceLine>mBasePath = inPath</SourceLine>
   <SourceLine>mDoc = inDoc</SourceLine>
   <SourceLine>mLastLoadedIter = mIter - 1 // guarantee different so LazyLoad optimisation works</SourceLine>
   <SourceLine>mUseOnlyNamedCols = true</SourceLine>
   <SourceLine>mColNames = inColNames</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
  <ItemParams>indoc as XMLDocument, inPath as String, inColNames() as string</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Note>
  <ItemName>About</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>About</NoteLine>
   <NoteLine></NoteLine>
   <NoteLine></NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Property>
  <ItemName>mBasePath</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mBasePath As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mBasePath As String</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mDoc</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mDoc As XmlDocument</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mDoc As XmlDocument</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mElements</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mElements As XmlNodeList</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mElements As XmlNodeList</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mLoaded</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mLoaded As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mLoaded As Boolean</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mIter</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mIter As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mIter As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mUbound</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mUbound As Integer</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mUbound As Integer</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mCurrentElement</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mCurrentElement As XmlElement</SourceLine>
   <SourceLine>loaded by LazyLoad</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mCurrentElement As XmlElement</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mLastLoadedIter</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mLastLoadedIter As Integer</SourceLine>
   <SourceLine>helps optimise LazyLoad</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mLastLoadedIter As Integer</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mColNames()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mColNames() As string</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mColNames() As string</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <Property>
  <ItemName>mUseOnlyNamedCols</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mUseOnlyNamedCols As Boolean</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mUseOnlyNamedCols As Boolean</ItemDeclaration>
  <ItemFlags>1</ItemFlags>
  <Shared>0</Shared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <InheritsFrom>Object</InheritsFrom>
  </ViewProperty>
  <ViewProperty>
   <ObjName>mLastLoadedIter</ObjName>
   <PropertyGroup>Behavior</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
</RBProject>
